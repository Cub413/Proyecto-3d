<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blender-like UI</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three/examples/js/controls/TransformControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three/examples/js/loaders/GLTFLoader.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            overflow: hidden;
            background-color: #333;
            height: 100%;
        }

        /* Header */
        #header {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 35px;
            background-color: #2c2c2c;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 10px;
            z-index: 2;
        }

        #header .menu {
            display: flex;
        }

        #header .menu button {
            background-color: #444;
            border: none;
            color: #fff;
            padding: 4px 8px;
            margin: 0 5px;
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
        }

        #header .menu button i {
            margin-right: 5px;
        }

        #header .menu button:hover {
            background-color: #555;
        }

        /* Sidebar */
        #sidebar {
            position: fixed;
            top: 35px;
            left: 0;
            width: 160px;
            height: calc(100% - 135px);
            background-color: #2c2c2c;
            color: #fff;
            padding: 5px;
            overflow-y: auto;
            z-index: 1;
        }

        #sidebar .section {
            margin-bottom: 10px;
        }

        #sidebar .section h3 {
            font-size: 12px;
            margin-bottom: 8px;
            border-bottom: 1px solid #444;
            padding-bottom: 4px;
        }

        #sidebar .section button {
            width: 100%;
            background-color: #444;
            border: none;
            color: #fff;
            padding: 5px;
            margin-bottom: 4px;
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
        }

        #sidebar .section button i {
            margin-right: 8px;
        }

        #sidebar .section button:hover {
            background-color: #555;
        }

        /* Timeline */
        #timeline {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 100px;
            background-color: #2c2c2c;
            color: #fff;
            padding: 10px;
            border-top: 1px solid #444;
            z-index: 1;
        }

        /* Main Viewport */
        #viewport {
            position: absolute;
            top: 0.1px;
            left: 160px;
            bottom: 1000px;
            right: 0;
            background-color: #555;
        }

        #viewport canvas {
            display: block;
            width: 100%;
            height: 100%;
        }

        /* Object list panel */
        #objectPanel {
            position: fixed;
            top: 30px;
            right: 10px;
            width: 200px;
            background-color: rgba(44,44,44,0.7);
            color: #fff;
            padding: 10px;
            z-index: 2;
            max-height: 500px;
            overflow-y: auto;
        }

        #objectPanel h3 {
            font-size: 14px;
            margin-bottom: 10px;
        }

        #objectPanel ul {
            list-style: none;
            padding: 0;
        }

        #objectPanel ul li {
            margin-bottom: 5px;
            cursor: pointer;
        }

        #objectPanel ul li:hover {
            color: #ffcc00;
        }

        /* Modal for object options */
        #objectOptionsModal {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.8);
            padding: 20px;
            color: white;
            display: none;
            z-index: 3;
        }

        #objectOptionsModal button {
            background-color: #444;
            color: #fff;
            border: none;
            padding: 8px 12px;
            margin-top: 10px;
            cursor: pointer;
        }

        #objectOptionsModal button:hover {
            background-color: #555;
        }

        #closeModal {
            position: absolute;
            top: 5px;
            right: 5px;
            color: white;
            font-size: 18px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <div id="header">
        <div class="menu">
            <button><i class="fas fa-file"></i>File</button>
            <button><i class="fas fa-edit"></i>Edit</button>
            <button><i class="fas fa-play"></i>Render</button>
        </div>
        <div class="menu">
            <button><i class="fas fa-question-circle"></i>Help</button>
        </div>
    </div>

    <!-- Sidebar -->
    <div id="sidebar">
        <div class="section">
            <h3>Tools</h3>
            <button id="move"><i class="fas fa-arrows-alt"></i> Move</button>
            <button id="rotate"><i class="fas fa-redo"></i> Rotate</button>
            <button id="scale"><i class="fas fa-expand"></i> Scale</button>
        </div>
        <!-- Add Menu -->
        <div class="section">
            <h3>Add</h3>
            <button onclick="createCube()"><i class="fas fa-cube"></i> Cube</button>
            <button onclick="createSphere()"><i class="fas fa-circle"></i> Sphere</button>
            <button onclick="createCylinder()"><i class="fas fa-caret-up"></i> Cylinder</button>
            <button onclick="createPlane()"><i class="fas fa-th-large"></i> Plane</button>
            <button onclick="createCone()"><i class="fas fa-caret-square-up"></i> Cone</button>
            <button onclick="createMonkey()"><i class="fas fa-user"></i> Monkey</button>
        </div>
    </div>

    <!-- Timeline -->
    <div id="timeline">
        Timeline (Frames will go here)
    </div>

    <!-- Main Viewport -->
    <div id="viewport">
        <canvas id="canvas3D"></canvas>
    </div>

    <!-- Object Panel -->
    <div id="objectPanel">
        <h3>Objects</h3>
        <ul id="objectList"></ul>
    </div>

    <!-- Modal for object options -->
    <div id="objectOptionsModal">
        <span id="closeModal">X</span>
        <p>Options for <span id="selectedObjectName"></span></p>
        <input type="text" id="newName" placeholder="Enter new name" />
        <button id="renameObject">Rename</button>
        <button id="deleteObject">Delete</button>
    </div>

    <script>
        // Configuración inicial de la escena
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf0f0f0);

        // Grid Helper
        const gridHelper = new THREE.GridHelper(50, 50);
        scene.add(gridHelper);

        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.set(0, 5, 10);
        camera.lookAt(0, 0, 0);

        const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('canvas3D') });
        renderer.setSize(window.innerWidth - 16, window.innerHeight - 13);
        document.body.appendChild(renderer.domElement);

        const controls = new THREE.OrbitControls(camera, renderer.domElement);

        // TransformControls
        const transformControls = new THREE.TransformControls(camera, renderer.domElement);
        scene.add(transformControls);

        const objects = [];
        const objectNames = [];

        // Función para crear cubo
        function createCube() {
            const geometry = new THREE.BoxGeometry(1, 1, 1);
            const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
            const cube = new THREE.Mesh(geometry, material);
            scene.add(cube);
            objects.push(cube);
            objectNames.push('Cube ' + objects.length);
            addObjectToPanel('Cube ' + objects.length, cube);
        }

        // Función para crear esfera
        function createSphere() {
            const geometry = new THREE.SphereGeometry(1, 32, 32);
            const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });
            const sphere = new THREE.Mesh(geometry, material);
            scene.add(sphere);
            objects.push(sphere);
            objectNames.push('Sphere ' + objects.length);
            addObjectToPanel('Sphere ' + objects.length, sphere);
        }

        // Función para crear cilindro
        function createCylinder() {
            const geometry = new THREE.CylinderGeometry(1, 1, 2, 32);
            const material = new THREE.MeshBasicMaterial({ color: 0x0000ff });
            const cylinder = new THREE.Mesh(geometry, material);
            scene.add(cylinder);
            objects.push(cylinder);
            objectNames.push('Cylinder ' + objects.length);
            addObjectToPanel('Cylinder ' + objects.length, cylinder);
        }

        // Función para crear plano
        function createPlane() {
            const geometry = new THREE.PlaneGeometry(5, 5);
            const material = new THREE.MeshBasicMaterial({ color: 0xffff00, side: THREE.DoubleSide });
            const plane = new THREE.Mesh(geometry, material);
            scene.add(plane);
            objects.push(plane);
            objectNames.push('Plane ' + objects.length);
            addObjectToPanel('Plane ' + objects.length, plane);
        }

        // Función para crear cono
        function createCone() {
            const geometry = new THREE.ConeGeometry(1, 2, 32);
            const material = new THREE.MeshBasicMaterial({ color: 0x800080 });
            const cone = new THREE.Mesh(geometry, material);
            scene.add(cone);
            objects.push(cone);
            objectNames.push('Cone ' + objects.length);
            addObjectToPanel('Cone ' + objects.length, cone);
        }

const loader = new THREE.GLTFLoader();

// Función para cargar el modelo "Monkey"
function createMonkey() {
    const url = 'https://www.mediafire.com/file/08a9k7b200n4sbd/Zussane_modelo.gltf/file';
    
    loader.load(
        url,
        function (gltf) {
            const model = gltf.scene;
            model.scale.set(1, 1, 1); // Ajusta la escala si es necesario
            model.position.set(0, 0, 0); // Posiciona el modelo en el centro de la escena
            scene.add(model);
            updateObjectList();
        },
        function (xhr) {
            console.log((xhr.loaded / xhr.total * 100) + '% loaded');
        },
        function (error) {
            console.error('An error happened while loading the model:', error);
        }
    );
}

        // Función para agregar objetos al panel
        function addObjectToPanel(name, object) {
            const listItem = document.createElement('li');
            listItem.textContent = name;
            listItem.addEventListener('click', () => selectObject(object));
            document.getElementById('objectList').appendChild(listItem);
        }

        // Función para seleccionar un objeto y activar la herramienta de mover
        function selectObject(object) {
            transformControls.attach(object);
            transformControls.setMode('translate');
            document.getElementById('selectedObjectName').textContent = objectNames[objects.indexOf(object)];
            document.getElementById('objectOptionsModal').style.display = 'block';
            document.getElementById('closeModal').style.display = 'block';
        }

        // Función para eliminar el objeto
        document.getElementById('deleteObject').addEventListener('click', () => {
            const objectName = document.getElementById('selectedObjectName').textContent;
            const objectIndex = objectNames.indexOf(objectName);
            if (objectIndex !== -1) {
                scene.remove(objects[objectIndex]);
                objects.splice(objectIndex, 1);
                objectNames.splice(objectIndex, 1);
                document.getElementById('objectList').innerHTML = '';
                objects.forEach((obj, index) => addObjectToPanel(objectNames[index], obj));
                document.getElementById('objectOptionsModal').style.display = 'none';
                document.getElementById('closeModal').style.display = 'none';
            }
        });

        // Función para cambiar el nombre
        document.getElementById('renameObject').addEventListener('click', () => {
            const newName = document.getElementById('newName').value;
            if (newName) {
                const objectName = document.getElementById('selectedObjectName').textContent;
                const objectIndex = objectNames.indexOf(objectName);
                if (objectIndex !== -1) {
                    objectNames[objectIndex] = newName;
                    document.getElementById('selectedObjectName').textContent = newName;
                    document.getElementById('newName').value = '';
                    document.getElementById('objectList').innerHTML = '';
                    objects.forEach((obj, index) => addObjectToPanel(objectNames[index], obj));
                }
            }
        });

        // Cerrar el modal de opciones
        document.getElementById('closeModal').addEventListener('click', () => {
            document.getElementById('objectOptionsModal').style.display = 'none';
            document.getElementById('closeModal').style.display = 'none';
        });

        // Cambiar el modo de TransformControls
        document.getElementById('move').addEventListener('click', () => transformControls.setMode('translate'));
        document.getElementById('rotate').addEventListener('click', () => transformControls.setMode('rotate'));
        document.getElementById('scale').addEventListener('click', () => transformControls.setMode('scale'));

        // Evento para congelar y descongelar la cámara
        transformControls.addEventListener('mouseDown', () => controls.enabled = false);
        transformControls.addEventListener('mouseUp', () => controls.enabled = true);

        // Animación
        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }

        animate();
    </script>
</body>
</html>
